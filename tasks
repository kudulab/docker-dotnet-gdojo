#!/bin/bash

set -e
if [[ ! -f ./releaser ]];then
  wget --quiet http://http.archive.ai-traders.com/releaser/1.0.0/releaser
fi
source ./releaser
if [[ ! -f ./docker-ops ]];then
  wget --quiet http://http.archive.ai-traders.com/docker-ops/0.2.2/docker-ops
fi
source ./docker-ops
# This goes as last in order to let end user variables override default values
releaser_init

image_name="docker-registry.ai-traders.com/mono-gide"
image_dir="./image"
imagerc_filename="imagerc"

function base_image_last_tag {
  git_tag=$(git ls-remote --tags git@git.ai-traders.com:stcdev/docker-mono-ide.git | sort -t '/' -k 3 -V | awk '{print $2}' | cut -d'/' -f3 | tail -1)
  if [[ "${git_tag}" == "" ]];then
    echo "fail! getting git tag from base image failed"
    return 1
  fi
  echo "${git_tag}"
}

function source_imagerc {
  source "${image_dir}/${imagerc_filename}"
  if [[ -z "AIT_DOCKER_IMAGE_NAME" ]]; then
    echo "fail! AIT_DOCKER_IMAGE_NAME not set"
    return 1
  fi
  if [[ -z "AIT_DOCKER_IMAGE_TAG" ]]; then
    echo "fail! AIT_DOCKER_IMAGE_TAG not set"
    return 1
  fi
}

command="$1"
case "${command}" in
  local_bump)
      next_version=$(get_next_oversion)
      set_version_in_changelog "${changelog_file}" "${next_version}"
      exit $?
      ;;
  bump)
      bump_changelog_and_oversion "$2"
      exit $?
      ;;
  verify_version)
      # conditional verify
      git fetch origin
      current_commit_git_tags=$(git tag -l --points-at HEAD)
      if [[ "${current_commit_git_tags}" != "" ]];then
        log_info "Current commit is already tagged, partial verify_version"
        version_from_changelog=$(get_last_version_from_changelog "${changelog_file}")
        version_from_oversion=$(get_next_oversion)
        if [[ "${version_from_changelog}" != "${version_from_oversion}" ]]; then
          log_error "version_from_changelog: ${version_from_changelog} != version_from_oversion: ${version_from_oversion}"
          exit 1
        fi
        log_info "Version verified successfully"
      else
        log_info "Current commit has no tags, full verify_version"
        verify_version_for_release
      fi
      exit $?
      ;;
  build)
      image_name_no_registry="${image_name/docker-registry.ai-traders.com\//}"
      base_img_version=$(base_image_last_tag)
      this_img_version=$(get_next_oversion)
      # we use variables file here, because base image (mono-ide) uses them as well
      sed "s/{{BASE_IMAGE_VERSION}}/${base_img_version}/g" image/etc_ide.d/variables/60-variables.sh.tmpl > image/etc_ide.d/variables/60-variables.sh
      sed -i "s/{{THIS_IMAGE_VERSION}}/${this_img_version}/g" image/etc_ide.d/variables/60-variables.sh
      sed "s/{{BASE_IMAGE_VERSION}}/${base_img_version}/g" image/Dockerfile.tmpl > image/Dockerfile
      docker_build "${image_dir}" "${imagerc_filename}" "${image_name}" "$2"
      exit $?
      ;;
  itest)
      source_imagerc
      echo "Testing image: ${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}"
      echo "IDE_DOCKER_IMAGE=\"${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}\"" > ./Idefile.to_be_tested
      echo "IDE_IDENTITY=\"$(pwd)/test/integration/identities/full\"" >> ./Idefile.to_be_tested
      echo "IDE_WORK=$(pwd)/test/integration/test_ide_work" >> ./Idefile.to_be_tested
      time bats "$(pwd)/test/integration/bats"
      exit $?
      ;;
  itest_i)
      source_imagerc
      echo "Testing image: ${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}"
      echo "IDE_DOCKER_IMAGE=\"${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}\"" > ./Idefile.to_be_tested
      echo "IDE_IDENTITY=\"$(pwd)/test/integration/identities/full\"" >> ./Idefile.to_be_tested
      echo "IDE_WORK=$(pwd)/test/integration/test_ide_work" >> ./Idefile.to_be_tested
      ide --idefile ./Idefile.to_be_tested
      exit $?
      ;;
  release)
      # conditional release
      git fetch origin
      current_commit_git_tags=$(git tag -l --points-at HEAD)
      if [[ "${current_commit_git_tags}" != "" ]];then
        log_info "Current commit is already tagged, skipping code release"
      else
        log_info "Current commit has no tags, starting code release..."
        verify_version_for_release
        git_tag_from_oversion
        old_version=$(get_next_oversion)
        next_version=$(bump_patch_version "${old_version}")
        set_next_oversion "${next_version}"
      fi
      exit $?
      ;;
  publish)
      source_imagerc "${image_dir}"  "${imagerc_filename}"
      production_image_tag=$(get_last_version_from_changelog "${changelog_file}")
      docker_push "${AIT_DOCKER_IMAGE_NAME}" "${AIT_DOCKER_IMAGE_TAG}" "${production_image_tag}"
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
