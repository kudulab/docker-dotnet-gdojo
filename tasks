#!/bin/bash

set -e

RELEASER_VERSION="2.1.0"
DOCKER_OPS_VERSION="2.0.0"
SECRET_OPS_VERSION="0.6.1"

SECRET_OPS_FILE="ops/secret-ops"
SECRET_OPS_TAR_FILE="ops/secret-ops-${SECRET_OPS_VERSION}.tar.gz"
RELEASER_FILE="ops/releaser-${RELEASER_VERSION}"
DOCKER_OPS_FILE="ops/docker-ops-${DOCKER_OPS_VERSION}"

mkdir -p ops
if [[ ! -f $RELEASER_FILE ]];then
  wget --quiet -O $RELEASER_FILE https://github.com/kudulab/releaser/releases/download/${RELEASER_VERSION}/releaser
fi
source $RELEASER_FILE
if [[ ! -f $DOCKER_OPS_FILE ]];then
  wget --quiet -O $DOCKER_OPS_FILE https://github.com/kudulab/docker-ops/releases/download/${DOCKER_OPS_VERSION}/docker-ops
fi
source $DOCKER_OPS_FILE
if [[ ! -f $SECRET_OPS_TAR_FILE ]];then
  wget --quiet -O $SECRET_OPS_TAR_FILE https://github.com/kudulab/secret-ops/releases/download/${SECRET_OPS_VERSION}/secret-ops.tar.gz
  tar -xf $SECRET_OPS_TAR_FILE -C ops
fi
source $SECRET_OPS_FILE

image_name="mono-gide"
image_dir="./image"
imagerc_filename="imagerc"
image_registry="docker-registry.ai-traders.com"

function base_image_last_tag {
  git_tag=$(git ls-remote --tags git@git.ai-traders.com:stcdev/docker-mono-ide.git | sort -t '/' -k 3 -V | awk '{print $2}' | cut -d'/' -f3 | tail -1)
  if [[ "${git_tag}" == "" ]];then
    echo "fail! getting git tag from base image failed"
    return 1
  fi
  echo "${git_tag}"
}

set +u
command="$1"
case "${command}" in
  set_version)
      releaser::bump_changelog_version "$2" "$3"
      exit $?
      ;;
  verify)
      # conditional verify
      git fetch origin
      current_commit_git_tags=$(git tag -l --points-at HEAD)
      if [[ "${current_commit_git_tags}" != "" ]];then
         echo "Current commit is already tagged"
      else
         echo "Current commit has no tags, full verify"
         releaser::verify_release_ready
      fi
      exit $?
      ;;
  build)
      base_img_version=$(base_image_last_tag)
      if [[ -z "${GO_PIPELINE_LABEL}" ]];then
        # set to the latest git commit hash
        ci_version=$(git rev-parse HEAD)
      else
        ci_version="${GO_PIPELINE_LABEL}"
      fi
      image_tag="${ci_version}"
      sed "s/{{BASE_IMAGE_VERSION}}/${base_img_version}/g" ${image_dir}/Dockerfile.tmpl > ${image_dir}/Dockerfile
      docker_ops::docker_build "${image_dir}" "${imagerc_filename}" "${image_name}" "${image_tag}" "${image_registry}"
      docker_ops::push "${image_dir}" "${imagerc_filename}"
      exit $?
      ;;
  itest)
      docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"
      echo "Testing image: ${KUDU_DOCKER_IMAGE_URL}"
      echo "DOJO_DOCKER_IMAGE=\"${KUDU_DOCKER_IMAGE_URL}\"" > ./Dojofile.to_be_tested
      echo "DOJO_IDENTITY_OUTER=\"$(pwd)/test/integration/identities/full\"" >> ./Dojofile.to_be_tested
      echo "DOJO_WORK_OUTER=$(pwd)/test/integration/test_dojo_work" >> ./Dojofile.to_be_tested
      time bats "$(pwd)/test/integration/bats"
      exit $?
      ;;
  itest_i)
      docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"
      echo "Testing image: ${KUDU_DOCKER_IMAGE_URL}"
      echo "DOJO_DOCKER_IMAGE=\"${KUDU_DOCKER_IMAGE_URL}\"" > ./Dojofile.to_be_tested
      echo "DOJO_IDENTITY_OUTER=\"$(pwd)/test/integration/identities/full\"" >> ./Dojofile.to_be_tested
      echo "DOJO_WORK_OUTER=$(pwd)/test/integration/test_dojo_work" >> ./Dojofile.to_be_tested
      dojo -c ./Dojofile.to_be_tested
      exit $?
      ;;
  release)
      ./tasks verify
      releaser::conditional_release
      exit $?
      ;;
  publish)
      base_img_version=$(base_image_last_tag)
      this_img_version=$(releaser::get_last_version_from_whole_changelog "${changelog_file}")
      image_tag="${this_img_version}_${base_img_version}"
      docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"
      docker_ops::retag_push "${image_dir}"  "${imagerc_filename}" "${image_name}" "${image_tag}" "${image_registry}"
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
